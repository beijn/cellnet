  ===  RUNNING ./cellnet (rmbad) at Mon Jul  1 12:33:36 EEST 2024 ===  
Mon Jul  1 12:33:37 2024       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 550.54.15              Driver Version: 550.54.15      CUDA Version: 12.4     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  Tesla V100-SXM2-32GB           Off |   00000000:3E:00.0 Off |                    0 |
| N/A   31C    P0             55W /  300W |       0MiB /  32768MiB |      1%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|  No running processes found                                                             |
+-----------------------------------------------------------------------------------------+
[jupytext] Reading ./results/./cellnet/240701-123334-rmbad-RUNNING/cellnet.py in format py
[jupytext] Setting kernel python3
[jupytext] Updating notebook metadata with '{"kernelspec": {"name": "python3", "language": "python", "display_name": "Python 3 (ipykernel)"}}'
[jupytext] Executing notebook with kernel python3
Traceback (most recent call last):
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/bin/jupytext", line 10, in <module>
    sys.exit(jupytext())
             ^^^^^^^^^^
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/jupytext/cli.py", line 497, in jupytext
    exit_code += jupytext_single_file(nb_file, args, log)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/jupytext/cli.py", line 734, in jupytext_single_file
    exec_proc.preprocess(notebook, resources=resources)
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/nbconvert/preprocessors/execute.py", line 103, in preprocess
    self.preprocess_cell(cell, resources, index)
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/nbconvert/preprocessors/execute.py", line 124, in preprocess_cell
    cell = self.execute_cell(cell, index, store_history=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
if RELEASE: # save model to disk
  B = next(iter(mk_loader([1], cfg=cfg_base, bs=1, transforms=mkAugs('test'), shuffle=False)))
  x = batch2cpu(B)[0].x[None]
  
  m = out['model'] # type: torch.nn.Module # type: ignore 
  m.eval()

  # save a test in/out
  np.save('.cache/export_test_x_1.npy', x)
  np.save('.cache/export_test_y_1.npy', cpu(m(gpu(x, device=device))))

  m.save_pretrained('./model_export')  # specific to master branch of SMP. TODO: make more robust with onnx. But see problem notes in cellnet.yml
  os.remove('model_export/README.md')

  with open('model_export/pipeline.json', 'w') as f: json.dump(dict(xmean=_xmean, xstd=_xstd, ymax=_ymax), f, indent=2)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[6], line 15[0m
[1;32m     12[0m m[38;5;241m.[39msave_pretrained([38;5;124m'[39m[38;5;124m./model_export[39m[38;5;124m'[39m)  [38;5;66;03m# specific to master branch of SMP. TODO: make more robust with onnx. But see problem notes in cellnet.yml[39;00m
[1;32m     13[0m os[38;5;241m.[39mremove([38;5;124m'[39m[38;5;124mmodel_export/README.md[39m[38;5;124m'[39m)
[0;32m---> 15[0m [38;5;28;01mwith[39;00m [38;5;28mopen[39m([38;5;124m'[39m[38;5;124mmodel_export/pipeline.json[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mw[39m[38;5;124m'[39m) [38;5;28;01mas[39;00m f: json[38;5;241m.[39mdump([38;5;28mdict[39m(xmean[38;5;241m=[39m_xmean, xstd[38;5;241m=[39m_xstd, ymax[38;5;241m=[39m_ymax), f, indent[38;5;241m=[39m[38;5;241m2[39m)

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/json/__init__.py:179[0m, in [0;36mdump[0;34m(obj, fp, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw)[0m
[1;32m    173[0m     iterable [38;5;241m=[39m [38;5;28mcls[39m(skipkeys[38;5;241m=[39mskipkeys, ensure_ascii[38;5;241m=[39mensure_ascii,
[1;32m    174[0m         check_circular[38;5;241m=[39mcheck_circular, allow_nan[38;5;241m=[39mallow_nan, indent[38;5;241m=[39mindent,
[1;32m    175[0m         separators[38;5;241m=[39mseparators,
[1;32m    176[0m         default[38;5;241m=[39mdefault, sort_keys[38;5;241m=[39msort_keys, [38;5;241m*[39m[38;5;241m*[39mkw)[38;5;241m.[39miterencode(obj)
[1;32m    177[0m [38;5;66;03m# could accelerate with writelines in some versions of Python, at[39;00m
[1;32m    178[0m [38;5;66;03m# a debuggability cost[39;00m
[0;32m--> 179[0m [43m[49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mchunk[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43miterable[49m[43m:[49m
[1;32m    180[0m [43m    [49m[43mfp[49m[38;5;241;43m.[39;49m[43mwrite[49m[43m([49m[43mchunk[49m[43m)[49m

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/json/encoder.py:432[0m, in [0;36m_make_iterencode.<locals>._iterencode[0;34m(o, _current_indent_level)[0m
[1;32m    430[0m     [38;5;28;01myield from[39;00m _iterencode_list(o, _current_indent_level)
[1;32m    431[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(o, [38;5;28mdict[39m):
[0;32m--> 432[0m     [38;5;28;01myield from[39;00m _iterencode_dict(o, _current_indent_level)
[1;32m    433[0m [38;5;28;01melse[39;00m:
[1;32m    434[0m     [38;5;28;01mif[39;00m markers [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/json/encoder.py:406[0m, in [0;36m_make_iterencode.<locals>._iterencode_dict[0;34m(dct, _current_indent_level)[0m
[1;32m    404[0m         [38;5;28;01melse[39;00m:
[1;32m    405[0m             chunks [38;5;241m=[39m _iterencode(value, _current_indent_level)
[0;32m--> 406[0m         [38;5;28;01myield from[39;00m chunks
[1;32m    407[0m [38;5;28;01mif[39;00m newline_indent [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m    408[0m     _current_indent_level [38;5;241m-[39m[38;5;241m=[39m [38;5;241m1[39m

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/json/encoder.py:439[0m, in [0;36m_make_iterencode.<locals>._iterencode[0;34m(o, _current_indent_level)[0m
[1;32m    437[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m"[39m[38;5;124mCircular reference detected[39m[38;5;124m"[39m)
[1;32m    438[0m     markers[markerid] [38;5;241m=[39m o
[0;32m--> 439[0m o [38;5;241m=[39m [43m_default[49m[43m([49m[43mo[49m[43m)[49m
[1;32m    440[0m [38;5;28;01myield from[39;00m _iterencode(o, _current_indent_level)
[1;32m    441[0m [38;5;28;01mif[39;00m markers [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/json/encoder.py:180[0m, in [0;36mJSONEncoder.default[0;34m(self, o)[0m
[1;32m    161[0m [38;5;28;01mdef[39;00m [38;5;21mdefault[39m([38;5;28mself[39m, o):
[1;32m    162[0m [38;5;250m    [39m[38;5;124;03m"""Implement this method in a subclass such that it returns[39;00m
[1;32m    163[0m [38;5;124;03m    a serializable object for ``o``, or calls the base implementation[39;00m
[1;32m    164[0m [38;5;124;03m    (to raise a ``TypeError``).[39;00m
[0;32m   (...)[0m
[1;32m    178[0m 
[1;32m    179[0m [38;5;124;03m    """[39;00m
[0;32m--> 180[0m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([38;5;124mf[39m[38;5;124m'[39m[38;5;124mObject of type [39m[38;5;132;01m{[39;00mo[38;5;241m.[39m[38;5;18m__class__[39m[38;5;241m.[39m[38;5;18m__name__[39m[38;5;132;01m}[39;00m[38;5;124m [39m[38;5;124m'[39m
[1;32m    181[0m                     [38;5;124mf[39m[38;5;124m'[39m[38;5;124mis not JSON serializable[39m[38;5;124m'[39m)

[0;31mTypeError[0m: Object of type float32 is not JSON serializable


> Notebook execution time (hhmmss) 015539
