  ===  RUNNING ./cellnet (rmbad-test) at Mon Jul  8 16:24:20 EEST 2024 ===  
Mon Jul  8 16:24:21 2024       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 550.54.15              Driver Version: 550.54.15      CUDA Version: 12.4     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  Tesla V100-PCIE-32GB           Off |   00000000:86:00.0 Off |                    0 |
| N/A   62C    P0             42W /  250W |       0MiB /  32768MiB |      2%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|  No running processes found                                                             |
+-----------------------------------------------------------------------------------------+
[jupytext] Reading ./results/./cellnet/240708-162418-rmbad-test-RUNNING/cellnet.py in format py
[jupytext] Setting kernel python3
[jupytext] Updating notebook metadata with '{"kernelspec": {"name": "python3", "language": "python", "display_name": "Python 3 (ipykernel)"}}'
[jupytext] Executing notebook with kernel python3
Traceback (most recent call last):
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/bin/jupytext", line 10, in <module>
    sys.exit(jupytext())
             ^^^^^^^^^^
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/jupytext/cli.py", line 497, in jupytext
    exit_code += jupytext_single_file(nb_file, args, log)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/jupytext/cli.py", line 734, in jupytext_single_file
    exec_proc.preprocess(notebook, resources=resources)
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/nbconvert/preprocessors/execute.py", line 103, in preprocess
    self.preprocess_cell(cell, resources, index)
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/nbconvert/preprocessors/execute.py", line 124, in preprocess_cell
    cell = self.execute_cell(cell, index, store_history=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/gpfs/space/home/eckhardt/.micromamba/envs/cellnet/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

if not DRAFT:
  results.to_csv('results.csv', index=False, sep=';')
  R = results.copy()
  R['vi'] = R['ti']; R['vl'] = R['tl']; R['va'] = R['ta']   # HACK because in RELEASE vi=[]
  R.rename(columns=dict(vi=key2text['vi']), inplace=True)
  plot.regplot(R, P, key2text)

results # type: ignore
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/seaborn/_base.py:1768[0m, in [0;36mcategorical_order[0;34m(vector, order)[0m
[1;32m   1767[0m [38;5;28;01mtry[39;00m:
[0;32m-> 1768[0m     order [38;5;241m=[39m [43mvector[49m[38;5;241;43m.[39;49m[43mcat[49m[38;5;241m.[39mcategories
[1;32m   1769[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mTypeError[39;00m, [38;5;167;01mAttributeError[39;00m):

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/pandas/core/generic.py:6299[0m, in [0;36mNDFrame.__getattr__[0;34m(self, name)[0m
[1;32m   6298[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[name]
[0;32m-> 6299[0m [38;5;28;01mreturn[39;00m [38;5;28;43mobject[39;49m[38;5;241;43m.[39;49m[38;5;21;43m__getattribute__[39;49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mname[49m[43m)[49m

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/pandas/core/accessor.py:224[0m, in [0;36mCachedAccessor.__get__[0;34m(self, obj, cls)[0m
[1;32m    223[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_accessor
[0;32m--> 224[0m accessor_obj [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_accessor[49m[43m([49m[43mobj[49m[43m)[49m
[1;32m    225[0m [38;5;66;03m# Replace the property with the accessor object. Inspired by:[39;00m
[1;32m    226[0m [38;5;66;03m# https://www.pydanny.com/cached-property.html[39;00m
[1;32m    227[0m [38;5;66;03m# We need to use object.__setattr__ because we overwrite __setattr__ on[39;00m
[1;32m    228[0m [38;5;66;03m# NDFrame[39;00m

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/pandas/core/arrays/categorical.py:2898[0m, in [0;36mCategoricalAccessor.__init__[0;34m(self, data)[0m
[1;32m   2897[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m, data) [38;5;241m-[39m[38;5;241m>[39m [38;5;28;01mNone[39;00m:
[0;32m-> 2898[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate[49m[43m([49m[43mdata[49m[43m)[49m
[1;32m   2899[0m     [38;5;28mself[39m[38;5;241m.[39m_parent [38;5;241m=[39m data[38;5;241m.[39mvalues

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/pandas/core/arrays/categorical.py:2907[0m, in [0;36mCategoricalAccessor._validate[0;34m(data)[0m
[1;32m   2906[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(data[38;5;241m.[39mdtype, CategoricalDtype):
[0;32m-> 2907[0m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m([38;5;124m"[39m[38;5;124mCan only use .cat accessor with a [39m[38;5;124m'[39m[38;5;124mcategory[39m[38;5;124m'[39m[38;5;124m dtype[39m[38;5;124m"[39m)

[0;31mAttributeError[0m: Can only use .cat accessor with a 'category' dtype

During handling of the above exception, another exception occurred:

[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[7], line 6[0m
[1;32m      4[0m   R[[38;5;124m'[39m[38;5;124mvi[39m[38;5;124m'[39m] [38;5;241m=[39m R[[38;5;124m'[39m[38;5;124mti[39m[38;5;124m'[39m]; R[[38;5;124m'[39m[38;5;124mvl[39m[38;5;124m'[39m] [38;5;241m=[39m R[[38;5;124m'[39m[38;5;124mtl[39m[38;5;124m'[39m]; R[[38;5;124m'[39m[38;5;124mva[39m[38;5;124m'[39m] [38;5;241m=[39m R[[38;5;124m'[39m[38;5;124mta[39m[38;5;124m'[39m]   [38;5;66;03m# HACK because in RELEASE vi=[][39;00m
[1;32m      5[0m   R[38;5;241m.[39mrename(columns[38;5;241m=[39m[38;5;28mdict[39m(vi[38;5;241m=[39mkey2text[[38;5;124m'[39m[38;5;124mvi[39m[38;5;124m'[39m]), inplace[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[0;32m----> 6[0m   [43mplot[49m[38;5;241;43m.[39;49m[43mregplot[49m[43m([49m[43mR[49m[43m,[49m[43m [49m[43mP[49m[43m,[49m[43m [49m[43mkey2text[49m[43m)[49m
[1;32m      8[0m results [38;5;66;03m# type: ignore[39;00m

File [0;32m~/cellnet/results/cellnet/240708-162418-rmbad-test-RUNNING/util/plot.py:122[0m, in [0;36mregplot[0;34m(R, dim, key2text)[0m
[1;32m    120[0m [38;5;28;01mfor[39;00m ax, (key, text) [38;5;129;01min[39;00m [38;5;28mzip[39m(axs[38;5;241m.[39mflat, key2text[38;5;241m.[39mitems()):
[1;32m    121[0m   [38;5;28;01mif[39;00m key [38;5;129;01min[39;00m [38;5;124m"[39m[38;5;124mta va tl vl[39m[38;5;124m"[39m[38;5;241m.[39msplit([38;5;124m'[39m[38;5;124m [39m[38;5;124m'[39m):
[0;32m--> 122[0m     ax [38;5;241m=[39m [43msns[49m[38;5;241;43m.[39;49m[43mscatterplot[49m[43m([49m[43max[49m[38;5;241;43m=[39;49m[43max[49m[43m,[49m[43m [49m[43mdata[49m[38;5;241;43m=[39;49m[43mR[49m[43m,[49m[43m [49m[43mx[49m[38;5;241;43m=[39;49m[43mdim[49m[43m,[49m[43m [49m[43my[49m[38;5;241;43m=[39;49m[43mkey[49m[43m,[49m[43m [49m[43mhue[49m[38;5;241;43m=[39;49m[43mvi[49m[43m)[49m 
[1;32m    123[0m     sns[38;5;241m.[39mregplot(x[38;5;241m=[39mdim, y[38;5;241m=[39mkey, data[38;5;241m=[39mR, scatter[38;5;241m=[39m[38;5;28;01mFalse[39;00m, ax[38;5;241m=[39max) 
[1;32m    124[0m     ax[38;5;241m.[39mset_title([38;5;124mf[39m[38;5;124m'[39m[38;5;132;01m{[39;00mtext[38;5;132;01m}[39;00m[38;5;124m vs [39m[38;5;132;01m{[39;00mkey2text[dim][38;5;132;01m}[39;00m[38;5;124m'[39m)

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/seaborn/relational.py:615[0m, in [0;36mscatterplot[0;34m(data, x, y, hue, size, style, palette, hue_order, hue_norm, sizes, size_order, size_norm, markers, style_order, legend, ax, **kwargs)[0m
[1;32m    606[0m [38;5;28;01mdef[39;00m [38;5;21mscatterplot[39m(
[1;32m    607[0m     data[38;5;241m=[39m[38;5;28;01mNone[39;00m, [38;5;241m*[39m,
[1;32m    608[0m     x[38;5;241m=[39m[38;5;28;01mNone[39;00m, y[38;5;241m=[39m[38;5;28;01mNone[39;00m, hue[38;5;241m=[39m[38;5;28;01mNone[39;00m, size[38;5;241m=[39m[38;5;28;01mNone[39;00m, style[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[0;32m   (...)[0m
[1;32m    612[0m     [38;5;241m*[39m[38;5;241m*[39mkwargs
[1;32m    613[0m ):
[0;32m--> 615[0m     p [38;5;241m=[39m [43m_ScatterPlotter[49m[43m([49m
[1;32m    616[0m [43m        [49m[43mdata[49m[38;5;241;43m=[39;49m[43mdata[49m[43m,[49m
[1;32m    617[0m [43m        [49m[43mvariables[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m[43mx[49m[38;5;241;43m=[39;49m[43mx[49m[43m,[49m[43m [49m[43my[49m[38;5;241;43m=[39;49m[43my[49m[43m,[49m[43m [49m[43mhue[49m[38;5;241;43m=[39;49m[43mhue[49m[43m,[49m[43m [49m[43msize[49m[38;5;241;43m=[39;49m[43msize[49m[43m,[49m[43m [49m[43mstyle[49m[38;5;241;43m=[39;49m[43mstyle[49m[43m)[49m[43m,[49m
[1;32m    618[0m [43m        [49m[43mlegend[49m[38;5;241;43m=[39;49m[43mlegend[49m
[1;32m    619[0m [43m    [49m[43m)[49m
[1;32m    621[0m     p[38;5;241m.[39mmap_hue(palette[38;5;241m=[39mpalette, order[38;5;241m=[39mhue_order, norm[38;5;241m=[39mhue_norm)
[1;32m    622[0m     p[38;5;241m.[39mmap_size(sizes[38;5;241m=[39msizes, order[38;5;241m=[39msize_order, norm[38;5;241m=[39msize_norm)

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/seaborn/relational.py:396[0m, in [0;36m_ScatterPlotter.__init__[0;34m(self, data, variables, legend)[0m
[1;32m    387[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m, [38;5;241m*[39m, data[38;5;241m=[39m[38;5;28;01mNone[39;00m, variables[38;5;241m=[39m{}, legend[38;5;241m=[39m[38;5;28;01mNone[39;00m):
[1;32m    388[0m 
[1;32m    389[0m     [38;5;66;03m# TODO this is messy, we want the mapping to be agnostic about[39;00m
[1;32m    390[0m     [38;5;66;03m# the kind of plot to draw, but for the time being we need to set[39;00m
[1;32m    391[0m     [38;5;66;03m# this information so the SizeMapping can use it[39;00m
[1;32m    392[0m     [38;5;28mself[39m[38;5;241m.[39m_default_size_range [38;5;241m=[39m (
[1;32m    393[0m         np[38;5;241m.[39mr_[[38;5;241m.5[39m, [38;5;241m2[39m] [38;5;241m*[39m np[38;5;241m.[39msquare(mpl[38;5;241m.[39mrcParams[[38;5;124m"[39m[38;5;124mlines.markersize[39m[38;5;124m"[39m])
[1;32m    394[0m     )
[0;32m--> 396[0m     [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__init__[39;49m[43m([49m[43mdata[49m[38;5;241;43m=[39;49m[43mdata[49m[43m,[49m[43m [49m[43mvariables[49m[38;5;241;43m=[39;49m[43mvariables[49m[43m)[49m
[1;32m    398[0m     [38;5;28mself[39m[38;5;241m.[39mlegend [38;5;241m=[39m legend

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/seaborn/_base.py:641[0m, in [0;36mVectorPlotter.__init__[0;34m(self, data, variables)[0m
[1;32m    639[0m [38;5;28;01mfor[39;00m var [38;5;129;01min[39;00m [[38;5;124m"[39m[38;5;124mhue[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124msize[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mstyle[39m[38;5;124m"[39m]:
[1;32m    640[0m     [38;5;28;01mif[39;00m var [38;5;129;01min[39;00m variables:
[0;32m--> 641[0m         [38;5;28;43mgetattr[39;49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[38;5;124;43mf[39;49m[38;5;124;43m"[39;49m[38;5;124;43mmap_[39;49m[38;5;132;43;01m{[39;49;00m[43mvar[49m[38;5;132;43;01m}[39;49;00m[38;5;124;43m"[39;49m[43m)[49m[43m([49m[43m)[49m

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/seaborn/_base.py:838[0m, in [0;36mVectorPlotter.map_hue[0;34m(self, palette, order, norm, saturation)[0m
[1;32m    837[0m [38;5;28;01mdef[39;00m [38;5;21mmap_hue[39m([38;5;28mself[39m, palette[38;5;241m=[39m[38;5;28;01mNone[39;00m, order[38;5;241m=[39m[38;5;28;01mNone[39;00m, norm[38;5;241m=[39m[38;5;28;01mNone[39;00m, saturation[38;5;241m=[39m[38;5;241m1[39m):
[0;32m--> 838[0m     mapping [38;5;241m=[39m [43mHueMapping[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mpalette[49m[43m,[49m[43m [49m[43morder[49m[43m,[49m[43m [49m[43mnorm[49m[43m,[49m[43m [49m[43msaturation[49m[43m)[49m
[1;32m    839[0m     [38;5;28mself[39m[38;5;241m.[39m_hue_map [38;5;241m=[39m mapping

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/seaborn/_base.py:150[0m, in [0;36mHueMapping.__init__[0;34m(self, plotter, palette, order, norm, saturation)[0m
[1;32m    147[0m [38;5;28;01melif[39;00m map_type [38;5;241m==[39m [38;5;124m"[39m[38;5;124mcategorical[39m[38;5;124m"[39m:
[1;32m    149[0m     cmap [38;5;241m=[39m norm [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m--> 150[0m     levels, lookup_table [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcategorical_mapping[49m[43m([49m
[1;32m    151[0m [43m        [49m[43mdata[49m[43m,[49m[43m [49m[43mpalette[49m[43m,[49m[43m [49m[43morder[49m[43m,[49m
[1;32m    152[0m [43m    [49m[43m)[49m
[1;32m    154[0m [38;5;66;03m# --- Option 3: datetime mapping[39;00m
[1;32m    155[0m 
[1;32m    156[0m [38;5;28;01melse[39;00m:
[1;32m    157[0m     [38;5;66;03m# TODO this needs actual implementation[39;00m
[1;32m    158[0m     cmap [38;5;241m=[39m norm [38;5;241m=[39m [38;5;28;01mNone[39;00m

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/seaborn/_base.py:224[0m, in [0;36mHueMapping.categorical_mapping[0;34m(self, data, palette, order)[0m
[1;32m    221[0m [38;5;250m[39m[38;5;124;03m"""Determine colors when the hue mapping is categorical."""[39;00m
[1;32m    222[0m [38;5;66;03m# -- Identify the order and name of the levels[39;00m
[0;32m--> 224[0m levels [38;5;241m=[39m [43mcategorical_order[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43morder[49m[43m)[49m
[1;32m    225[0m n_colors [38;5;241m=[39m [38;5;28mlen[39m(levels)
[1;32m    227[0m [38;5;66;03m# -- Identify the set of colors to use[39;00m

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/seaborn/_base.py:1771[0m, in [0;36mcategorical_order[0;34m(vector, order)[0m
[1;32m   1768[0m     order [38;5;241m=[39m vector[38;5;241m.[39mcat[38;5;241m.[39mcategories
[1;32m   1769[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mTypeError[39;00m, [38;5;167;01mAttributeError[39;00m):
[0;32m-> 1771[0m     order [38;5;241m=[39m [43mpd[49m[38;5;241;43m.[39;49m[43mSeries[49m[43m([49m[43mvector[49m[43m)[49m[38;5;241;43m.[39;49m[43munique[49m[43m([49m[43m)[49m
[1;32m   1773[0m     [38;5;28;01mif[39;00m variable_type(vector) [38;5;241m==[39m [38;5;124m"[39m[38;5;124mnumeric[39m[38;5;124m"[39m:
[1;32m   1774[0m         order [38;5;241m=[39m np[38;5;241m.[39msort(order)

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/pandas/core/series.py:2407[0m, in [0;36mSeries.unique[0;34m(self)[0m
[1;32m   2344[0m [38;5;28;01mdef[39;00m [38;5;21munique[39m([38;5;28mself[39m) [38;5;241m-[39m[38;5;241m>[39m ArrayLike:  [38;5;66;03m# pylint: disable=useless-parent-delegation[39;00m
[1;32m   2345[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m   2346[0m [38;5;124;03m    Return unique values of Series object.[39;00m
[1;32m   2347[0m 
[0;32m   (...)[0m
[1;32m   2405[0m [38;5;124;03m    Categories (3, object): ['a' < 'b' < 'c'][39;00m
[1;32m   2406[0m [38;5;124;03m    """[39;00m
[0;32m-> 2407[0m     [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43munique[49m[43m([49m[43m)[49m

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/pandas/core/base.py:1025[0m, in [0;36mIndexOpsMixin.unique[0;34m(self)[0m
[1;32m   1023[0m     result [38;5;241m=[39m values[38;5;241m.[39munique()
[1;32m   1024[0m [38;5;28;01melse[39;00m:
[0;32m-> 1025[0m     result [38;5;241m=[39m [43malgorithms[49m[38;5;241;43m.[39;49m[43munique1d[49m[43m([49m[43mvalues[49m[43m)[49m
[1;32m   1026[0m [38;5;28;01mreturn[39;00m result

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/pandas/core/algorithms.py:401[0m, in [0;36munique[0;34m(values)[0m
[1;32m    307[0m [38;5;28;01mdef[39;00m [38;5;21munique[39m(values):
[1;32m    308[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m    309[0m [38;5;124;03m    Return unique values based on a hash table.[39;00m
[1;32m    310[0m 
[0;32m   (...)[0m
[1;32m    399[0m [38;5;124;03m    array([('a', 'b'), ('b', 'a'), ('a', 'c')], dtype=object)[39;00m
[1;32m    400[0m [38;5;124;03m    """[39;00m
[0;32m--> 401[0m     [38;5;28;01mreturn[39;00m [43munique_with_mask[49m[43m([49m[43mvalues[49m[43m)[49m

File [0;32m~/.micromamba/envs/cellnet/lib/python3.12/site-packages/pandas/core/algorithms.py:440[0m, in [0;36munique_with_mask[0;34m(values, mask)[0m
[1;32m    438[0m table [38;5;241m=[39m hashtable([38;5;28mlen[39m(values))
[1;32m    439[0m [38;5;28;01mif[39;00m mask [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 440[0m     uniques [38;5;241m=[39m [43mtable[49m[38;5;241;43m.[39;49m[43munique[49m[43m([49m[43mvalues[49m[43m)[49m
[1;32m    441[0m     uniques [38;5;241m=[39m _reconstruct_data(uniques, original[38;5;241m.[39mdtype, original)
[1;32m    442[0m     [38;5;28;01mreturn[39;00m uniques

File [0;32mpandas/_libs/hashtable_class_helper.pxi:7248[0m, in [0;36mpandas._libs.hashtable.PyObjectHashTable.unique[0;34m()[0m

File [0;32mpandas/_libs/hashtable_class_helper.pxi:7195[0m, in [0;36mpandas._libs.hashtable.PyObjectHashTable._unique[0;34m()[0m

[0;31mTypeError[0m: unhashable type: 'list'


> Notebook execution time (hhmmss) 001220
